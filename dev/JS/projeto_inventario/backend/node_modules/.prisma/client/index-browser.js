
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.1.0
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.1.0",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  created_at: 'created_at',
  updated_at: 'updated_at',
  profile_id: 'profile_id'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nivel: 'nivel'
};

exports.Prisma.AccessScalarFieldEnum = {
  id: 'id',
  permission: 'permission',
  access_nivel: 'access_nivel',
  profile_id: 'profile_id'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  company: 'company',
  status: 'status',
  address: 'address',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StorageScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  address: 'address',
  description: 'description',
  status: 'status',
  storage_code: 'storage_code'
};

exports.Prisma.VirtualLocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  codBar: 'codBar',
  description: 'description',
  access_nivel: 'access_nivel'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  total_quantity: 'total_quantity',
  addresed_quantity: 'addresed_quantity',
  product_code: 'product_code',
  product_desc: 'product_desc',
  cost: 'cost',
  storage_code: 'storage_code',
  branch_code: 'branch_code',
  reservation: 'reservation',
  unbalanced: 'unbalanced',
  address_control: 'address_control',
  localiz_control: 'localiz_control',
  access_nivel: 'access_nivel'
};

exports.Prisma.Info_stockScalarFieldEnum = {
  id: 'id',
  branch_code: 'branch_code',
  storage_code: 'storage_code',
  document: 'document',
  date_count: 'date_count',
  total_stock_value: 'total_stock_value',
  total_stock_quantity: 'total_stock_quantity',
  access_nivel: 'access_nivel'
};

exports.Prisma.Addressed_stockScalarFieldEnum = {
  id: 'id',
  addressed_quantity: 'addressed_quantity',
  product_code: 'product_code',
  product_desc: 'product_desc',
  storage_code: 'storage_code',
  branch_code: 'branch_code',
  address_code: 'address_code',
  reserve_quantity: 'reserve_quantity',
  transfer_quantity: 'transfer_quantity',
  access_nivel: 'access_nivel'
};

exports.Prisma.CountScalarFieldEnum = {
  id: 'id',
  count_quantity: 'count_quantity',
  status: 'status',
  code_count: 'code_count',
  address_code: 'address_code',
  user_name: 'user_name',
  product_code: 'product_code',
  product_desc: 'product_desc',
  storage_code: 'storage_code',
  branch_code: 'branch_code',
  access_nivel: 'access_nivel'
};

exports.Prisma.Invent_addressScalarFieldEnum = {
  id: 'id',
  document: 'document',
  date_count: 'date_count',
  branch_code: 'branch_code',
  storage_code: 'storage_code',
  address_code: 'address_code',
  status: 'status',
  situation: 'situation',
  user_last_count: 'user_last_count',
  difference_quantity: 'difference_quantity',
  original_quantity: 'original_quantity',
  count_quantity: 'count_quantity',
  access_nivel: 'access_nivel'
};

exports.Prisma.Invent_productScalarFieldEnum = {
  id: 'id',
  document: 'document',
  date_count: 'date_count',
  branch_code: 'branch_code',
  storage_code: 'storage_code',
  address_code: 'address_code',
  product_code: 'product_code',
  product_desc: 'product_desc',
  status: 'status',
  situation: 'situation',
  counted: 'counted',
  difference_quantity: 'difference_quantity',
  original_quantity: 'original_quantity',
  count_quantity: 'count_quantity',
  value_diferece: 'value_diferece',
  access_nivel: 'access_nivel'
};

exports.Prisma.Info_inventScalarFieldEnum = {
  id: 'id',
  document: 'document',
  date_count: 'date_count',
  branch_code: 'branch_code',
  storage_code: 'storage_code',
  date_valid: 'date_valid',
  origin: 'origin',
  tp_material: 'tp_material',
  status: 'status',
  accuracy_quanty: 'accuracy_quanty',
  accuracy_value: 'accuracy_value',
  accuracy_percent: 'accuracy_percent',
  accuracy_total: 'accuracy_total',
  total_stock_value: 'total_stock_value',
  total_inventory_value: 'total_inventory_value',
  total_stock_quanty: 'total_stock_quanty',
  total_inventory_quanty: 'total_inventory_quanty',
  difference_quanty: 'difference_quanty',
  diference_value: 'diference_value',
  access_nivel: 'access_nivel'
};

exports.Prisma.Number_controlScalarFieldEnum = {
  id: 'id',
  number: 'number',
  service: 'service',
  storage_code: 'storage_code',
  branch_code: 'branch_code',
  access_nivel: 'access_nivel'
};

exports.Prisma.Count_controlScalarFieldEnum = {
  id: 'id',
  code_count: 'code_count',
  desc_count: 'desc_count'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Access: 'Access',
  Branch: 'Branch',
  Storage: 'Storage',
  Address: 'Address',
  VirtualLocation: 'VirtualLocation',
  Product: 'Product',
  stock: 'stock',
  info_stock: 'info_stock',
  addressed_stock: 'addressed_stock',
  count: 'count',
  invent_address: 'invent_address',
  invent_product: 'invent_product',
  info_invent: 'info_invent',
  number_control: 'number_control',
  count_control: 'count_control'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
