// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration, cria as tabelas l√° no BD:npx prisma migrate dev --schema=./prisma/schema.prisma
model User {
  id         String    @id @default(uuid())
  name       String
  email      String
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  profile_id String
  profile    Profile   @relation(fields: [profile_id], references: [id])

  @@map("users") //nome da tabela
}

model Profile {
  id     String   @id @default(uuid())
  name   String
  nivel  Int
  users  User[]
  access Access[]

  @@map("profiles")
}

model Access {
  id           String  @id @default(uuid())
  permission   String
  access_nivel String
  profile_id   String
  profile      Profile @relation(fields: [profile_id], references: [id])

  @@map("accesses")
}

model Branch {
  id         String    @id @default(uuid())
  name       String
  code       String
  status     Boolean   @default(true)
  address    Boolean   @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("branches")
}

model Storage {
  id   String @id @default(uuid())
  code String
  name String

  @@map("storages")
}

model Address {
  id           String @id @default(uuid())
  address      String
  description  String
  status       Int
  storage_code String

  @@map("addresses")
}

model VirtualLocation {
  id   String @id @default(uuid())
  name String
  code Int

  @@map("virtual_locations")
}

model Product {
  id          String @id @default(uuid())
  name        String
  code        String
  codBar      String
  cost        String
  description String

  @@map("products")
}

model stock {
  id             String @id @default(uuid())
  total_quantity Int
  product_code   String
  product_desc   String
  storage_code   String
  branch_code    String

  @@map("stocks")
}

model addressed_stock {
  id                 String @id @default(uuid())
  addressed_quantity Int
  product_code       String
  product_desc       String
  storage_code       String
  branch_code        String
  address_code       String

  @@map("addressed_stocks")
}

model count {
  id             String @id @default(uuid())
  count_quantity Int
  difference     Int
  status         String
  user_name      String
  product_code   String
  product_desc   String
  storage_code   String
  branch_code    String
  address_code   String

  @@map("counts")
}

model invent {
  id                     String   @id @default(uuid())
  tp_material            String
  document               Int
  date_count             String
  date_valid             String
  origin                 String
  filial                 String
  accuracy_quanty        Float?
  accuracy_value         Float?
  accuracy_percent       Float?
  accuracy_total         Float?
  total_stock_value      Float?
  total_inventory_value  Float?
  total_stock_quanty     Int?
  total_inventory_quanty Int?
  difference_value       Float?
  difference_quanty      Int?

  @@map("invents")
}
